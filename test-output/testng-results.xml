<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="7" passed="2" failed="5" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2022-11-25T15:49:25 EET" name="Default suite" finished-at="2022-11-25T15:52:55 EET" duration-ms="210234">
    <groups>
    </groups>
    <test started-at="2022-11-25T15:49:25 EET" name="Default test" finished-at="2022-11-25T15:52:55 EET" duration-ms="210234">
      <class name="tests.UserRegistrationTest">
        <test-method is-config="true" signature="startdriver(java.lang.String)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:23 EET" name="startdriver" finished-at="2022-11-25T15:49:25 EET" duration-ms="2065" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startdriver -->
        <test-method is-config="true" signature="setExtent()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:25 EET" name="setExtent" finished-at="2022-11-25T15:49:25 EET" duration-ms="102" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setExtent -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:25 EET" name="navigateToRegister" finished-at="2022-11-25T15:49:27 EET" duration-ms="2271" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCanRegisterWithVaildData()[pri:1, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:27 EET" name="UserCanRegisterWithVaildData" finished-at="2022-11-25T15:49:49 EET" duration-ms="21338" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCanRegisterWithVaildData -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:49 EET" name="tearDown" finished-at="2022-11-25T15:49:49 EET" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCanRegisterWithVaildData status=SUCCESS method=UserRegistrationTest.UserCanRegisterWithVaildData()[pri:1, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:49 EET" name="navigateToRegister" finished-at="2022-11-25T15:49:49 EET" duration-ms="807" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithFirstnNameStartsWithSmallLetter()[pri:2, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:49:49 EET" name="UserCannotRegisterWithFirstnNameStartsWithSmallLetter" finished-at="2022-11-25T15:50:12 EET" duration-ms="23012" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[we can register with small letters on last name expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: we can register with small letters on last name expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at tests.UserRegistrationTest.UserCannotRegisterWithFirstnNameStartsWithSmallLetter(UserRegistrationTest.java:141)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithFirstnNameStartsWithSmallLetter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:12 EET" name="tearDown" finished-at="2022-11-25T15:50:13 EET" duration-ms="216" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithFirstnNameStartsWithSmallLetter status=FAILURE method=UserRegistrationTest.UserCannotRegisterWithFirstnNameStartsWithSmallLetter()[pri:2, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:13 EET" name="navigateToRegister" finished-at="2022-11-25T15:50:13 EET" duration-ms="856" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithLastNameStartsWithSmallLetter()[pri:3, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:13 EET" name="UserCannotRegisterWithLastNameStartsWithSmallLetter" finished-at="2022-11-25T15:50:39 EET" duration-ms="25043" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[we can register with small letters on last name expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: we can register with small letters on last name expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at tests.UserRegistrationTest.UserCannotRegisterWithLastNameStartsWithSmallLetter(UserRegistrationTest.java:163)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithLastNameStartsWithSmallLetter -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:39 EET" name="tearDown" finished-at="2022-11-25T15:50:39 EET" duration-ms="205" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithLastNameStartsWithSmallLetter status=FAILURE method=UserRegistrationTest.UserCannotRegisterWithLastNameStartsWithSmallLetter()[pri:3, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:39 EET" name="navigateToRegister" finished-at="2022-11-25T15:50:40 EET" duration-ms="937" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithFirstnNameAndLastNameWhenMatched()[pri:4, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:50:40 EET" name="UserCannotRegisterWithFirstnNameAndLastNameWhenMatched" finished-at="2022-11-25T15:51:02 EET" duration-ms="21863" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[we can not register  in case firstName and LastName when are not matched expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: we can not register  in case firstName and LastName when are not matched expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at tests.UserRegistrationTest.UserCannotRegisterWithFirstnNameAndLastNameWhenMatched(UserRegistrationTest.java:188)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithFirstnNameAndLastNameWhenMatched -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:02 EET" name="tearDown" finished-at="2022-11-25T15:51:02 EET" duration-ms="218" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithFirstnNameAndLastNameWhenMatched status=FAILURE method=UserRegistrationTest.UserCannotRegisterWithFirstnNameAndLastNameWhenMatched()[pri:4, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:02 EET" name="navigateToRegister" finished-at="2022-11-25T15:51:03 EET" duration-ms="810" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithInvalidMobileNumber()[pri:5, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:03 EET" name="UserCannotRegisterWithInvalidMobileNumber" finished-at="2022-11-25T15:51:24 EET" duration-ms="21660" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[we can register With Invalid Mobile Number expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: we can register With Invalid Mobile Number expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at tests.UserRegistrationTest.UserCannotRegisterWithInvalidMobileNumber(UserRegistrationTest.java:210)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithInvalidMobileNumber -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:24 EET" name="tearDown" finished-at="2022-11-25T15:51:25 EET" duration-ms="322" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithInvalidMobileNumber status=FAILURE method=UserRegistrationTest.UserCannotRegisterWithInvalidMobileNumber()[pri:5, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:25 EET" name="navigateToRegister" finished-at="2022-11-25T15:51:25 EET" duration-ms="754" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithInvalidEmail()[pri:6, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:51:25 EET" name="UserCannotRegisterWithInvalidEmail" finished-at="2022-11-25T15:52:31 EET" duration-ms="65471" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithInvalidEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:31 EET" name="tearDown" finished-at="2022-11-25T15:52:31 EET" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithInvalidEmail status=SUCCESS method=UserRegistrationTest.UserCannotRegisterWithInvalidEmail()[pri:6, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="navigateToRegister()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:31 EET" name="navigateToRegister" finished-at="2022-11-25T15:52:32 EET" duration-ms="871" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- navigateToRegister -->
        <test-method signature="UserCannotRegisterWithExistingEmail()[pri:7, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:32 EET" name="UserCannotRegisterWithExistingEmail" finished-at="2022-11-25T15:52:54 EET" duration-ms="22618" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[we can register With Existing Email expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: we can register With Existing Email expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:819)
at tests.UserRegistrationTest.UserCannotRegisterWithExistingEmail(UserRegistrationTest.java:258)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- UserCannotRegisterWithExistingEmail -->
        <test-method is-config="true" signature="tearDown(org.testng.ITestResult)[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:54 EET" name="tearDown" finished-at="2022-11-25T15:52:55 EET" duration-ms="589" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=UserCannotRegisterWithExistingEmail status=FAILURE method=UserRegistrationTest.UserCannotRegisterWithExistingEmail()[pri:7, instance:tests.UserRegistrationTest@518ed9b4] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="endReport()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:55 EET" name="endReport" finished-at="2022-11-25T15:52:55 EET" duration-ms="219" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- endReport -->
        <test-method is-config="true" signature="stopdriver()[pri:0, instance:tests.UserRegistrationTest@518ed9b4]" started-at="2022-11-25T15:52:55 EET" name="stopdriver" finished-at="2022-11-25T15:52:55 EET" duration-ms="262" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stopdriver -->
      </class> <!-- tests.UserRegistrationTest -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
